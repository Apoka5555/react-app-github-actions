name: CI and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      use-cache:
        description: Whether to execute cache step
        type: boolean
        default: true
      node-version:
        description: Node version
        type: choice
        options:
          - 21.x
          - 22.x
          - 23.x
        default: 22.x

jobs:
  install-deps:
    runs-on: ubuntu-latest
    outputs:
      deps-cache-key: ${{ steps.cache-key.outputs.CACHE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Calculate cache key
        id: cache-key
        run: |
          echo "CACHE_KEY=deps-node-modules-${{ hashFiles('package-lock.json') }}" >> "$GITHUB_OUTPUT"

      - name: Cache Node Modules
        uses: actions/cache@v4
        if: ${{ inputs.use-cache }}
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}

      - name: Cache Cypress Binary
        uses: actions/cache@v4
        if: ${{ inputs.use-cache }}
        id: cache-cypress
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Cypress
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        run: npx cypress install

  lint-test:
    runs-on: ubuntu-latest
    needs: install-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Restore Node Modules Cache
        uses: actions/cache@v4
        if: ${{ inputs.use-cache }}
        with:
          path: node_modules
          key: ${{ needs.install-deps.outputs.deps-cache-key }}

      - name: Restore Cypress Cache
        uses: actions/cache@v4
        if: ${{ inputs.use-cache }}
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ hashFiles('package-lock.json') }}

      - name: Formatting, linting, tsc, and tests
        run: |
          npx eslint src --ext js,ts,tsx -f json -o lint.json
          npm run test
          npm run cypress:run

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/react-app:latest

  deploy-to-ec2:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build-and-push-docker

    steps:
      - name: Setup SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Connect to AWS EC2 and Deploy Docker Image
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_USERNAME }}/react-app:latest
            docker stop react-app || true
            docker rm react-app || true
            docker run -d --name react-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/react-app:latest
          EOF
